{"version":3,"sources":["components/Note.js","components/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","BASE_URL","request","axios","get","nonExisting","id","date","then","response","data","concat","noteObject","post","res","changedNote","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","console","log","updatedNote","n","catch","err","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","length","Date","toISOString","Math","random","returnedNote","onChange","target","value","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.39d42045.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n    ? 'make not important' : 'make important'\r\n\r\n  return (\r\n    <li className='note'>\r\n      {note.content} &nbsp;\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import axios from \"axios\";\r\n\r\nconst BASE_URL = '/api/notes'\r\n\r\nconst getAll = () => {\r\n\tconst request = axios.get(BASE_URL)\r\n\tconst nonExisting = {\r\n\t  id: 10000,\r\n\t  content: 'This note is not saved to server',\r\n\t  date: '2019-05-30T17:30:31.098Z',\r\n\t  important: true,\r\n\t}\r\n\treturn request.then(response => response.data.concat(nonExisting))\r\n  }\r\n\r\nconst create = (noteObject) => {\r\n\tconst request = axios.post(BASE_URL, noteObject)\r\n\treturn request.then(res => res.data)\r\n}\r\n\r\nconst update = (changedNote, id) => {\r\n\tconst request = axios.put(`${BASE_URL}/${id}` , changedNote)\r\n\treturn request.then(res => res.data)\r\n}\r\n\r\nexport default {getAll, create, update}","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Notification","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: \"green\",\r\n    fontStyle: \"italic\",\r\n    fontSize: 16,\r\n  };\r\n\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>\r\n        Note app, Department of Computer Science, University of Helsinki 2021\r\n      </em>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Note from \"./components/Note\";\r\nimport noteService from './components/notes'\r\nimport Notification from \"./components/Notification\";\r\nimport Footer from \"./components/Footer\";\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([]);\r\n  const [newNote, setNewNote] = useState(\"\");\r\n  const [showAll, setShowAll] = useState(true);\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  const fetchNotes = () => {\r\n    noteService\r\n      .getAll()\r\n      .then(initialNotes => setNotes(initialNotes))\r\n  }\r\n\r\n  useEffect(fetchNotes, [])\r\n\r\n  const notesToShow = showAll\r\n    ? notes\r\n    : notes.filter((note) => note.important === true);\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault();\r\n    const noteObject = {\r\n      id: notes.length + 1,\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() < 0.5,\r\n    };\r\n    noteService\r\n      .create(noteObject)\r\n      .then(returnedNote => {\r\n        setNotes(notes.concat(returnedNote))\r\n        setNewNote(\"\")\r\n      })\r\n    }\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    const note = notes.find(note => note.id === id)\r\n    const changedNote = {...note, important: !note.important}\r\n\r\n    console.log('changedNote :>> ', changedNote);\r\n\r\n    noteService\r\n      .update(changedNote, id)\r\n      .then(updatedNote => {\r\n        setNotes(notes.map(n => n.id === id ? updatedNote : n))\r\n      })\r\n      .catch(err => {\r\n        setErrorMessage(\r\n          `Note '${note.content}' was already removed from server`\r\n        )\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000)\r\n        setNotes(notes.filter(n => n.id !== id))\r\n      })\r\n  };\r\n\r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={errorMessage}/>\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          Show {showAll ? \"Important\" : \"All\"}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map((note) => (\r\n          <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)}/>\r\n        ))}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input onChange={handleNoteChange} value={newNote}/>\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import ReactDOM from 'react-dom'\r\nimport App from './App.js'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}